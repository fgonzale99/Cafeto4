'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Axes = require('./Axes.js');
var Curves = require('./Curves.js');
var Cadre = require('./Cadre.js');
var Background = require('./Background.js');
var Foreground = require('./Foreground.js');
var Title = require('./Title.js');

var imUtils = require('./core/im-utils.js');

/*
	{
		width: ,
		height: ,
		cadre: Cadre,
		background: Background,
		title: Title,
		axes: Axes,
		curves: Curves,
		foreground: Foreground
	}
*/

var Drawer = function (_React$Component) {
	_inherits(Drawer, _React$Component);

	function Drawer() {
		_classCallCheck(this, Drawer);

		return _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).apply(this, arguments));
	}

	_createClass(Drawer, [{
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(props) {
			return !imUtils.isEqual(props.state, this.props.state);
		}
	}, {
		key: 'orderAG',
		value: function orderAG() {
			return this.props.state.axisOnTop === true ? React.createElement(
				'g',
				null,
				React.createElement(Curves, { state: this.props.state.curves }),
				React.createElement(Axes, { state: this.props.state.axes })
			) : React.createElement(
				'g',
				null,
				React.createElement(Axes, { state: this.props.state.axes }),
				React.createElement(Curves, { state: this.props.state.curves })
			);
		}
	}, {
		key: 'render',
		value: function render() {
			var state = this.props.state;
			return React.createElement(
				'svg',
				{ width: state.width, height: state.height },
				state.cadre ? React.createElement(Cadre, { width: state.width, height: state.height }) : null,
				React.createElement(Background, { state: state.background }),
				React.createElement(Title, { state: state.title }),
				this.orderAG(),
				React.createElement(Foreground, { state: state.foreground, pWidth: state.width, pHeight: state.height })
			);
		}
	}]);

	return Drawer;
}(React.Component);

module.exports = Drawer;