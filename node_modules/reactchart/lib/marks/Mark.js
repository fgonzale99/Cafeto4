'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var Dot = require('./Dot.js');
var Bar = require('./Bar.js');
var Square = require('./Square.js');

var imUtils = require('../core/im-utils.js');

var Mark = function (_React$Component) {
	_inherits(Mark, _React$Component);

	function Mark() {
		_classCallCheck(this, Mark);

		return _possibleConstructorReturn(this, (Mark.__proto__ || Object.getPrototypeOf(Mark)).apply(this, arguments));
	}

	_createClass(Mark, [{
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(props) {
			return !imUtils.isEqual(props.state, this.props.state);
		}
	}, {
		key: 'mark',
		value: function mark(state) {
			switch (this.props.type) {
				case 'square':
				case 'Square':
				case 'opensquare':
				case 'OpenSquare':
					return React.createElement(Square, { state: state });
				case 'dot':
				case 'Dot':
				case 'opendot':
				case 'OpenDot':
					return React.createElement(Dot, { state: state });
				case 'bar':
				case 'Bar':
					return React.createElement(Bar, { state: state });
				default:
					throw new Error('unrecognized mark type: "' + this.props.type + '"');
			}
		}
	}, {
		key: 'pin',
		value: function pin(pinS) {
			return !!pinS.path ? React.createElement(
				'g',
				null,
				React.createElement('path', { strokeWidth: '1', stroke: pinS.pinColor, fill: 'none', d: pinS.path }),
				React.createElement(
					'text',
					{ fontSize: pinS.labelFS, style: { textAnchor: pinS.labelAnc }, fill: pinS.color, x: pinS.xL, y: pinS.yL },
					pinS.label
				)
			) : React.createElement(
				'text',
				{ fontSize: pinS.labelFS, style: { textAnchor: pinS.labelAnc }, fill: pinS.color, x: pinS.xL, y: pinS.yL },
				pinS.label
			);
		}
	}, {
		key: 'render',
		value: function render() {
			return this.props.state.pin ? React.createElement(
				'g',
				null,
				this.mark(this.props.state),
				this.pin(this.props.state.pin)
			) : this.mark(this.props.state);
		}
	}]);

	return Mark;
}(React.Component);

module.exports = Mark;