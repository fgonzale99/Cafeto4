'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Drawer = require('./Drawer.js');

var core = require('./core/process.js');
var _ = require('underscore');

var Graph = function (_React$Component) {
	_inherits(Graph, _React$Component);

	function Graph() {
		_classCallCheck(this, Graph);

		return _possibleConstructorReturn(this, (Graph.__proto__ || Object.getPrototypeOf(Graph)).apply(this, arguments));
	}

	_createClass(Graph, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (this.props.__preprocessed) {
				this.props.updateGraph(this);
			}
		}
	}, {
		key: 'render',
		value: function render() {

			var props = this.props.__preprocessed ? this.props.props() : core.process(this.props).get();

			return React.createElement(Drawer, { state: props });
		}
	}]);

	return Graph;
}(React.Component);

var Legend = function (_React$Component2) {
	_inherits(Legend, _React$Component2);

	function Legend() {
		_classCallCheck(this, Legend);

		return _possibleConstructorReturn(this, (Legend.__proto__ || Object.getPrototypeOf(Legend)).apply(this, arguments));
	}

	_createClass(Legend, [{
		key: 'table',
		value: function table(tab) {

			var tabline = function tabline(line, idx) {
				var icon = {
					width: line.icon.props.width
				};
				return React.createElement(
					'tr',
					{ key: idx },
					React.createElement(
						'td',
						{ style: icon },
						line.icon
					),
					React.createElement(
						'td',
						null,
						line.label
					)
				);
			};

			return React.createElement(
				'table',
				this.props,
				React.createElement(
					'tbody',
					null,
					_.map(tab, function (line, idx) {
						return tabline(line, idx);
					})
				)
			);
		}
	}, {
		key: 'line',
		value: function line(leg) {
			var print = function print(l, idx) {
				// a little depth to the icon
				// a little space to breathe
				// here to avoid use of CSS, easyness of use
				// for a third party
				var margin = {
					style: {
						marginRight: '10pt'
					}
				};
				return React.createElement(
					'span',
					_extends({ key: idx }, margin),
					React.createElement(
						'span',
						{ verticalAlign: 'sub' },
						l.icon
					),
					React.createElement(
						'span',
						null,
						l.label
					)
				);
			};

			return React.createElement(
				'div',
				this.props,
				_.map(leg, function (l, idx) {
					return print(l, idx);
				})
			);
		}
	}, {
		key: 'legend',
		value: function legend(leg) {
			return !!this.props.line ? this.line(leg) : this.table(leg);
		}
	}, {
		key: 'render',
		value: function render() {
			var legend = this.props.preprocessed === true ? this.props.legend() : core.processLegend(this.props);
			return !!legend ? this.legend(legend) : null;
		}
	}]);

	return Legend;
}(React.Component);

Graph.Legend = Legend;

module.exports = Graph;