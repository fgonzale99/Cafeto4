'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var space = require('../core/space-transf.js');
var imUtils = require('../core/im-utils.js');

/*
	{
		ds: {x: , y:},
		position: {x: , y:},
		label: '',
		FSize: ,
		offset: {x, y},
		anchor: '',
		color: '',
		dir: {x, y},
		rotate: true ||Â false,
		transform: true || false
	},
*/

var Label = function (_React$Component) {
	_inherits(Label, _React$Component);

	function Label() {
		_classCallCheck(this, Label);

		return _possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).apply(this, arguments));
	}

	_createClass(Label, [{
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(props) {
			return !imUtils.isEqual(props.state, this.props.state);
		}
	}, {
		key: 'power',
		value: function power(label, labProps, props) {
			var base = label.base,
			    power = label.power;

			return React.createElement(
				'text',
				_extends({}, props, labProps),
				React.createElement(
					'tspan',
					null,
					base
				),
				power !== 0 ? React.createElement(
					'tspan',
					null,
					'\xB710'
				) : null,
				power !== 0 ? React.createElement(
					'tspan',
					{ dy: -0.5 * labProps.fontSize },
					power
				) : null
			);
		}
	}, {
		key: 'render',
		value: function render() {

			if (this.props.state.label.length === 0) {
				return null;
			}

			// label
			// => theta = arctan(y/x) [-90,90]

			var _props$state = this.props.state,
			    transform = _props$state.transform,
			    ds = _props$state.ds,
			    position = _props$state.position,
			    offset = _props$state.offset,
			    rotate = _props$state.rotate,
			    dir = _props$state.dir,
			    color = _props$state.color,
			    FSize = _props$state.FSize,
			    anchor = _props$state.anchor,
			    label = _props$state.label;


			var xL = (transform ? space.toC(ds.x, position.x) : position.x) + offset.x;
			var yL = (transform ? space.toC(ds.y, position.y) : position.y) + offset.y;

			var theta = rotate ? Math.floor(Math.atan(-Math.sqrt(dir.y / dir.x)) * 180 / Math.PI) : 0; // in degrees

			var rotation = 'rotate(' + theta + ' ' + xL + ' ' + yL + ')';

			var labProps = this.props.css ? null : {
				fill: color,
				fontSize: FSize
			};

			var props = {
				className: this.props.className,
				x: xL,
				y: yL,
				transform: rotation,
				textAnchor: anchor
			};

			return typeof label === 'string' ? React.createElement(
				'text',
				_extends({}, props, labProps),
				label
			) : this.power(label, labProps, props);
		}
	}]);

	return Label;
}(React.Component);

module.exports = Label;