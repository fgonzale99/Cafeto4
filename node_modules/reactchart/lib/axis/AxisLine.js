'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Label = require('./Label.js');
var utils = require('../core/utils.js');
var imUtils = require('../core/im-utils.js');

var _require = require('../core/proprieties.js'),
    defMargins = _require.defMargins;

/*
	{
		show: true || false,

	///// line part
		line: {
			CS: ''
			start: {x,y},
			end: {x, y},
			origin: {x,y},
			radius: {x, y},
			color: '',
			width:,
		},

	/// label part
		label: Label 

 /// common factor part
		comFac: {
			factor: ,
			offset: {x, y},
			FSize: ,
			anchor: '',
			color: ''
		}

	}

*/

var AxisLine = function (_React$Component) {
	_inherits(AxisLine, _React$Component);

	function AxisLine() {
		_classCallCheck(this, AxisLine);

		return _possibleConstructorReturn(this, (AxisLine.__proto__ || Object.getPrototypeOf(AxisLine)).apply(this, arguments));
	}

	_createClass(AxisLine, [{
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(props) {
			return !imUtils.isEqual(props.state, this.props.state);
		}
	}, {
		key: 'axis',
		value: function axis() {
			var lprops = this.props.state.line;

			var lp = this.props.css ? null : {
				stroke: lprops.color,
				strokeWidth: lprops.width
			};

			switch (lprops.CS) {
				case 'cart':
					return React.createElement('line', _extends({ className: this.props.className }, lp, {
						x1: lprops.start.x, x2: lprops.end.x, y1: lprops.start.y, y2: lprops.end.y }));
				case 'polar':
					return React.createElement('ellipse', _extends({ className: this.props.className }, lp, {
						cx: lprops.origin.x, cy: lprops.origin.y, rx: lprops.radius.x, ry: lprops.radius.y }));
				default:
					throw new Error('Unknown coordinate system: "' + this.props.state.CS + '"');
			}
		}
	}, {
		key: 'factor',
		value: function factor() {
			var state = this.props.state;
			var comFac = state.comFac,
			    line = state.line;
			var factor = comFac.factor,
			    Fsize = comFac.Fsize,
			    offset = comFac.offset,
			    color = comFac.color,
			    ds = comFac.ds;

			if (utils.isNil(factor) || factor === 1) {
				return null;
			}

			var dir = utils.direction(line, ds);
			dir.x = Math.sqrt(dir.x / dir.line);
			dir.y = Math.sqrt(dir.y / dir.line);

			var mgr = utils.mgr(factor);
			var om = mgr.orderMag(factor);

			var labMar = defMargins.outer.label.bottom; // = top, left, right
			var width = 5 * (3 + (om > 100 ? 0.8 : om > 10 ? 0.5 : 0.2)); // 5px for 10^(123)
			var height = Fsize;

			var off = { x: 0, y: 0 };
			switch (dir.corner) {
				case '01':
					off.x = -width;
					off.y = -height;
					break;
				case '11':
					off.x = width * (dir.y - dir.x) + dir.y * labMar;
					off.y = height * (dir.y - dir.x) - dir.x * labMar - dir.y * labMar * 0.5;
					break;
				case '10':
					off.x = width;
					off.y = height + labMar;
			}

			var pos = {
				x: offset.x + line.end.x + off.x,
				y: offset.y + line.end.y + off.y
			};

			return React.createElement(
				'text',
				_extends({}, pos, { fill: color, fontSize: Fsize }),
				React.createElement(
					'tspan',
					{ textAnchor: 'end' },
					'\xB710'
				),
				React.createElement(
					'tspan',
					{ dy: -0.5 * Fsize, textAnchor: 'start' },
					om
				)
			);
		}
	}, {
		key: 'render',
		value: function render() {

			var labName = this.props.className + 'Label';

			return this.props.state.show === false ? null : React.createElement(
				'g',
				null,
				this.axis(),
				this.factor(),
				React.createElement(Label, { className: labName, css: this.props.css, state: this.props.state.label })
			);
		}
	}]);

	return AxisLine;
}(React.Component);

module.exports = AxisLine;