'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var imUtils = require('./core/im-utils.js');

var Title = function (_React$Component) {
	_inherits(Title, _React$Component);

	function Title() {
		_classCallCheck(this, Title);

		return _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).apply(this, arguments));
	}

	_createClass(Title, [{
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(props) {
			return !imUtils.isEqual(props.state, this.props.state);
		}
	}, {
		key: 'render',
		value: function render() {
			var xT = this.props.state.width / 2;
			var yT = this.props.state.FSize + 5; // see defaults in space-mgr, its 10 px margin
			return !!this.props.state.title && this.props.state.title.length !== 0 ? React.createElement(
				'text',
				{ textAnchor: 'middle', fontSize: this.props.state.FSize, x: xT, y: yT },
				this.props.state.title
			) : null;
		}
	}]);

	return Title;
}(React.Component);

module.exports = Title;